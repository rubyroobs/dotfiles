#!/usr/bin/env bash

# asdf plugins
if [ -f "$HOME/.asdf/asdf.sh" ]; then
    . $HOME/.asdf/asdf.sh
    for pluginName in \
        ruby \
        golang \
        nodejs \
        yarn \
        golang \
        shellcheck ; do
        asdf plugin add $pluginName >/dev/null 2>&1
    done
fi

# rustup
if [ ! -f "$HOME/.cargo/bin/rustup" ]; then
    echo "Installing rustup..."
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
fi

{{- if (eq .chezmoi.os "darwin") }}
# libfido2 SK provider for macOS ssh-agent
if [ ! -f "/usr/local/lib/libsk-libfido2.dylib" ]; then
    if command -v install-libsk-libfido2 > /dev/null 2>&1; then
        echo "install-libsk-libfido2 available but dylib is missing, installing..."
        sudo install-libsk-libfido2
        killall ssh-agent
    fi
fi
{{- end }}

# fonts
#
# force BSD tar
TAR_BIN=`command -v tar 2>&1`
if command -v bsdtar > /dev/null 2>&1; then
    TAR_BIN=`command -v bsdtar 2>&1`
fi

if [[ "$OSTYPE" == "darwin"* ]]; then
  FONT_DIR="$HOME/Library/Fonts"
else
  FONT_DIR="$HOME/.fonts"
  SYS_FONT_DIR="/usr/share/fonts/"
fi

if [ ! -d "$FONT_DIR/zpix" ]; then
    echo "Installing zpix font..."
    mkdir -p $FONT_DIR/zpix
    curl -sL -o $FONT_DIR/zpix/zpix.ttf https://github.com/SolidZORO/zpix-pixel-font/releases/latest/download/zpix.ttf
    curl -sL -o $FONT_DIR/zpix/zpix.bdf https://github.com/SolidZORO/zpix-pixel-font/releases/latest/download/zpix.bdf
fi

if [ ! -d "$FONT_DIR/PixelMplus-20130602" ]; then
    echo "Installing PixelMplus font... (this might fail without unzip installed)"
    curl -sL -o /tmp/PixelMplus-20130602.zip "https://github.com/itouhiro/PixelMplus/releases/download/v1.0.0/PixelMplus-20130602.zip"
    unzip -q /tmp/PixelMplus-20130602.zip -d $FONT_DIR
    rm /tmp/PixelMplus-20130602.zip
fi

if [ ! -d "$FONT_DIR/DejaVuSansMono" ]; then
    echo "Installing DejaVu Sans Mono font..."
    mkdir -p $FONT_DIR/DejaVuSansMono
    curl -sL "https://github.com/ryanoasis/nerd-fonts/releases/latest/download/DejaVuSansMono.tar.xz" | xzcat | $TAR_BIN xf - -C $FONT_DIR/DejaVuSansMono
fi

if [ ! -d "$FONT_DIR/JetBrainsMono" ]; then
    echo "Installing JetBrains Mono font..."
    mkdir -p $FONT_DIR/JetBrainsMono
    curl -sL "https://github.com/ryanoasis/nerd-fonts/releases/latest/download/JetBrainsMono.tar.xz" | xzcat | $TAR_BIN xf - -C $FONT_DIR/JetBrainsMono
fi

if [ ! -d "$FONT_DIR/NotoNerdFont" ]; then
    echo "Installing Noto nerd font..."
    mkdir -p $FONT_DIR/NotoNerdFont
    curl -sL "https://github.com/ryanoasis/nerd-fonts/releases/latest/download/Noto.tar.xz" | xzcat | $TAR_BIN xf - -C $FONT_DIR/NotoNerdFont
fi

if [ ! -d "$FONT_DIR/Noto" ]; then
    echo "Installing Noto font..."
    mkdir -p $FONT_DIR/Noto
    mkdir -p /tmp/notofontdl
    # TODO: auto update this? their formatting means I can't do the latest thingy
    curl -sL -o /tmp/noto-monthly-release-24.8.1.zip "https://github.com/notofonts/notofonts.github.io/archive/refs/tags/noto-monthly-release-24.8.1.zip"
    unzip -q /tmp/noto-monthly-release-24.8.1.zip -d /tmp/notofontdl
    rm /tmp/noto-monthly-release-24.8.1.zip
    install -Dm644 /tmp/notofontdl/notofonts.github.io-noto-monthly-release-24.8.1/fonts/*/hinted/ttf/*.tt[fc] -t $FONT_DIR/Noto
    rm -rf /tmp/notofontdl
fi

if [ ! -d "$FONT_DIR/NotoCJK" ]; then
    echo "Installing Noto CJK font..."
    mkdir -p $FONT_DIR/NotoCJK
    curl -sL -o /tmp/01_NotoSerifCJK.ttc.zip "https://github.com/notofonts/noto-cjk/releases/latest/download/01_NotoSerifCJK.ttc.zip"
    unzip -q /tmp/01_NotoSerifCJK.ttc.zip -d $FONT_DIR/NotoCJK
    rm /tmp/01_NotoSerifCJK.ttc.zip
fi

if [ ! -d "$FONT_DIR/MPLUS" ]; then
    echo "Installing MPLUS font..."
    mkdir -p $FONT_DIR/MPLUS
    curl -sL -o /tmp/c47fd4ff0a604d1517625a0f3d67e6d64e12d585.zip "https://github.com/coz-m/MPLUS_FONTS/archive/c47fd4ff0a604d1517625a0f3d67e6d64e12d585.zip"
    unzip -q /tmp/c47fd4ff0a604d1517625a0f3d67e6d64e12d585.zip -d /tmp/mplusfontdl
    rm /tmp/c47fd4ff0a604d1517625a0f3d67e6d64e12d585.zip
    install -Dm644 /tmp/mplusfontdl/MPLUS_FONTS-c47fd4ff0a604d1517625a0f3d67e6d64e12d585/fonts/ttf/*.tt[fc] -t $FONT_DIR/MPLUS
    rm -rf /tmp/mplusfontdl
fi


unamestr=$(uname)

if [[ "$unamestr" == "Linux" || "$unamestr" == *"BSD" ]]; then
    if [ ! -d "$FONT_DIR/SanFrancisco" ]; then
        echo "Installing San Francisco font..."
        mkdir -p $FONT_DIR/SanFrancisco
        curl -sL -o /tmp/77f8a1e62803752013d4933dbaf11653ec3826f9.zip "https://github.com/AppleDesignResources/SanFranciscoFont/archive/77f8a1e62803752013d4933dbaf11653ec3826f9.zip"
        unzip -q /tmp/77f8a1e62803752013d4933dbaf11653ec3826f9.zip -d /tmp/sanfranciscofontdl
        rm /tmp/77f8a1e62803752013d4933dbaf11653ec3826f9.zip
        install -Dm644 /tmp/sanfranciscofontdl/SanFranciscoFont-77f8a1e62803752013d4933dbaf11653ec3826f9/*.otf -t $FONT_DIR/SanFrancisco
        rm -rf /tmp/sanfranciscofontdl
    fi

    if [ ! -d "$FONT_DIR/HiraKakuGo" ]; then
        echo "Installing Hiragino Kaku Gothic Pro font..."
        mkdir -p $FONT_DIR/HiraKakuGo
        curl -sL "https://github.com/sideroad/capturing/archive/be9e7fc972b20bf8cd210a6d63f93d8a55bf7f68.zip" | $TAR_BIN xf - --strip-components=2 -C $FONT_DIR/HiraKakuGo capturing-be9e7fc972b20bf8cd210a6d63f93d8a55bf7f68/.fonts/
    fi

    if [ ! -d "$FONT_DIR/AppleSDGothicNeo" ]; then
        echo "Installing Hiragino Kaku Gothic Pro font..."
        mkdir -p $FONT_DIR/AppleSDGothicNeo
        curl -sL "https://github.com/adrinerDP/font-applesdgothicneo/archive/86137e950e321310309cfd7a239746ab1b5ba5ff.zip" | $TAR_BIN xf - --strip-components=2 -C $FONT_DIR/AppleSDGothicNeo font-applesdgothicneo-86137e950e321310309cfd7a239746ab1b5ba5ff/fonts/
    fi

    if [ ! -d "$FONT_DIR/AppleColorEmoji" ]; then
        echo "Installing Apple Color Emoji font..."
        mkdir -p $FONT_DIR/AppleColorEmoji
        curl -sL -o $FONT_DIR/AppleColorEmoji/AppleColorEmoji.ttf https://github.com/samuelngs/apple-emoji-linux/releases/latest/download/AppleColorEmoji.ttf
    fi
fi

if [[ "$unamestr" == "Linux" || "$unamestr" == *"BSD" ]]; then
    PRIV_ESC_BIN=`command -v sudo 2>&1`
    if command -v doas > /dev/null 2>&1; then
        PRIV_ESC_BIN=`command -v doas 2>&1`
    fi
    $PRIV_ESC_BIN cp -R ~/.fonts/* /usr/share/fonts/
    $PRIV_ESC_BIN mkfontscale /usr/share/fonts/*
    $PRIV_ESC_BIN mkfontdir /usr/share/fonts/*
fi

echo "Rebuilding font cache..."
fc-cache -f

# macOS application and sketchybar helper bootstrap
if [[ "$OSTYPE" == "darwin"* ]]; then
    if [ ! -f "/Applications/kitty.app/Contents/MacOS/kitty" ]; then
        echo "Installing bootstrap applications (to stop this in future applies, make sure kitty is installed)..."
        brew bundle --verbose --no-lock --file=$HOME/.config/homebrew/Brewfile.bootstrap
    fi

    if [ ! -f "$HOME/.local/share/sketchybar_lua/sketchybar.so" ]; then
        echo "Installing SbarLua (Sketchybar Lua helpers)..."
        git clone https://github.com/FelixKratz/SbarLua.git /tmp/SbarLua && cd /tmp/SbarLua/ && make install && rm -rf /tmp/SbarLua/
    fi
fi
